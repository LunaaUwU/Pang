MAKING OF:
First I started by creating main.cpp and the main loop, with the init functionality.
After that, I started by creating game.cpp and managing some things in there, to get the hang of rendering and updating.
After I got used to that, I created world.cpp and started painting the walls and background, realizing i should separate those two just in case I have to render something on top of the background and behind the walls.
When the world was working, I started creating the player and the movement, with the first problem arising: collision. 
The collision of this game works by checking if the shape of the sprite colliding is trying to go beyond the second sprite.

Example:
if (m_player.getPosition().x < 136.f)
{
    m_player.setPosition(136.f, m_player.getPosition().y);
}
if (m_player.getPosition().x > 1656.f)
{
    m_player.setPosition(1656.f, m_player.getPosition().y);
}

If the player position is further to the right than we want, we will update the position to the limit, same for the left.

After solving this problem, I started working on some sprite changes when facing left or right, and when shooting.
After being able to shoot, the next step was to spawn a harpoon, so I created harpoon.cpp and made some methods to initialize it and deactivating, and activating it when pressing space on top of the player.
When the harpoon was working, I ran into another problem, the player was not stoping when shooting. This is when I got introduced into timers.
For a timer to work, you have to make it restart only once, which is the hard part. For this case, i made a m_shooting bool and put all the movement update of the player in an else so it will only move if the character is not shooting.
When the player presses space, it will set m_shooting to true, so it will not be able to shoot again in the next frame. It will also restart the timer so it doesnt instantly runs out of time.

After having a working player and a working harpoon, I started working on getting a ball to work.
First, i created ball.cpp and set one in the middle of the screen. At first, I made the ball have X and Y speed and made it move like a DVD logo making it bounce off the walls using the same collision strategy as with the player.
When the ball could move, it was time to make it collide with both the player and harpoon, again, I used the same method: if the ball was to the right of the left side of the player, to the left of the right side of the player,
and under the player height, it means the ball was touching the player, same with the harpoon. So I made the game close when the ball collided with the player, and made the ball deactivate when colliding with the harpoon.
After this, the hard part begins: getting a pooler to work.

For a pooler, I would need to have an array of a set amount of balls and start by instantiating them and deactivating them, after that, I would start working on activating the balls.
In ball.cpp, when you collide with the harpoon, I made the ball spawn two balls of the next size (unless the ball was already the smallest size), and then deactivating that ball.
When I got this working, I made a win condition by saving how many balls you instantiated, which will be changed later.

After having a working game, I started making some passives to make the game fun.
For this, I needed a new pooler and made it work the same way: instantiating x passives and deactivating them, and then activating them when needed.
To activate the passives, I made a random number generator when colliding a ball with the harpoon, and made sure it will activate as many balls as you requested when instantiating them in the start.

After this, I started working on a restart option and some menus, which was the hardest part of this project.
I quickly made the program able to send you back to the first menu, restart the player position, and the harpoon. But the two poolers were the hard part.
(I will skip the passive pooler for this explanation, since it's very similar to the ball pooler)
I started by making every ball in the ball array deactivate, and it worked, but when you tried to activate them over the limit of balls instantiated it would give out a memory leak.
So I restarted a couple more variables and made it work... except the textures did not work as planned. For example, let's say you have a ball with the ball texture of size 0, and you deactivate it.
If you try to re-activate it with a new size, for example, size 1, the texture will bug out. After some hours of trying things and asking in the forum,
which a wonderful person let me know that if you put a second argument as true in the setTexture method, it will restart the texture before applying, which I believe is the problem of this fix,
I realised the pooler was not using its true potential. After many memory leaks, I finally made a working pooler that will re-use previously activated balls, without the need of changing their texture,
because I would either pick the balls that already have the texture I want, or the balls that have not yet been activated meaning they don't have any texture applied.

After making this pooler, I didn't need the re-texturing, and I worked on finishing the game by adding difficulty modes and a pause option in-game.

I wanted to add sounds to the game, but after trying to include the Audio modules, they would make the program not compile and I believe this is caused by the version of the SFML we downloaded, which is a shame.





FEEDBACK:
I had a lot of fun making this project!
From the very first time I heard I could make Pang I was very excited about it, and started making progress every day slowly.
The worst parts of the project were starting with little knowledge of SFML and making the game restart, since restarting variables and the pooler took me way too long, but it made me realise how a well-made pooler works.
After this project, I would say I have improved my C++ skills by a large amount while having fun and sharing this project with my friends.
I must admit that I would not have had such a great time if the game I was making is not a game I'm thrilled about.
In general, there's not many new things about game making that I have learnt, except the making of a pooler, but I have learnt some other things such as loading from files and making a game able to restart.
I would have liked to introduce animations and sounds but I was not able to use sounds and the animations were not very clear to make to me, so I passed that opportunity up.





CONCLUSION:
This project was my favorite of all the projects I have done so far! And I have learnt a lot with it.